server.port=8082

logging.level.root=trace
logging.path=f:/springboot.log

application.test=Hi moocer.

blockchain.conf.path=F:/leaderus/springboot.git/trunk/fabricsdk.git/trunk/src/test/resources/config/network-config.yaml
blockchain.keystore.path=F:/leaderus/springboot.git/trunk/fabricsdk.git/trunk/src/test/resources/config/fabricstore

blockchain.channel.path=F:/leaderus/springboot.git/trunk/fabricsdk.git/trunk/src/test/resources/config/channel7.tx
blockchain.channel.name=channel7

blockchain.chaincode.name=example2_1_0
blockchain.chaincode.path=chaincode_example2
blockchain.chaincode.version=v2
blockchain.chaincode.rootpath=F:/leaderus/springboot.git/trunk/fabricsdk.git/trunk/
blockchain.chaincode.endorsementpolicyFile=F:/leaderus/springboot.git/trunk/fabricsdk.git/trunk/src/chaincode_example2/chaincodeendorsementpolicy.yaml

blockchain.org.name=Org1

blockchain.configtxlator.location=http://192.168.18.135:7059

# 只用于没有CA 场景下，生成user。 集成ca环境时，通过ca client 拉取
blockchain.user1.privateKeyFile=F:/leaderus/springboot.git/trunk/fabricsdk.git/trunk/src/test/resources/config/users/User1@org1.example.com/msp/keystore/key.pem
blockchain.user1.certificateFile=F:/leaderus/springboot.git/trunk/fabricsdk.git/trunk/src/test/resources/config/users/User1@org1.example.com/msp/signcerts/User1@org1.example.com-cert.pem

blockchain.ordererAdmin.privateKeyFile=F:/leaderus/springboot.git/trunk/fabricsdk.git/trunk/src/test/resources/config/users/ordererAdmin/msp/keystore/key.pem
blockchain.ordererAdmin.certificateFile=F:/leaderus/springboot.git/trunk/fabricsdk.git/trunk/src/test/resources/config/users/ordererAdmin/msp/signcerts/Admin@example.com-cert.pem